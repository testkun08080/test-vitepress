import{_ as r,c as a,o as t,ag as o}from"./chunks/framework.DlGnLQc4.js";const c=JSON.parse('{"title":"物理エンジン","description":"","frontmatter":{},"headers":[],"relativePath":"programming/physics.md","filePath":"programming/physics.md"}'),i={name:"programming/physics.md"};function n(s,l,e,g,h,u){return t(),a("div",null,l[0]||(l[0]=[o('<h1 id="物理エンジン" tabindex="-1">物理エンジン <a class="header-anchor" href="#物理エンジン" aria-label="Permalink to &quot;物理エンジン&quot;">​</a></h1><p>物理エンジンは、ゲーム内の物体の動きと相互作用をシミュレートするためのシステムです。リアルな動き、衝突、および物理的な効果を実現するために不可欠です。</p><h2 id="物理シミュレーションの基本概念" tabindex="-1">物理シミュレーションの基本概念 <a class="header-anchor" href="#物理シミュレーションの基本概念" aria-label="Permalink to &quot;物理シミュレーションの基本概念&quot;">​</a></h2><h3 id="運動学" tabindex="-1">運動学 <a class="header-anchor" href="#運動学" aria-label="Permalink to &quot;運動学&quot;">​</a></h3><ul><li><strong>位置と速度</strong>: 物体の空間内の位置と移動速度</li><li><strong>加速度</strong>: 速度の変化率</li><li><strong>回転</strong>: 角度、角速度、角加速度</li></ul><h3 id="力学" tabindex="-1">力学 <a class="header-anchor" href="#力学" aria-label="Permalink to &quot;力学&quot;">​</a></h3><ul><li><strong>力</strong>: 物体の動きを変化させる要因</li><li><strong>質量</strong>: 物体の慣性の尺度</li><li><strong>運動量</strong>: 質量と速度の積</li><li><strong>トルク</strong>: 回転力</li></ul><h2 id="衝突検出" tabindex="-1">衝突検出 <a class="header-anchor" href="#衝突検出" aria-label="Permalink to &quot;衝突検出&quot;">​</a></h2><h3 id="広域フェーズ" tabindex="-1">広域フェーズ <a class="header-anchor" href="#広域フェーズ" aria-label="Permalink to &quot;広域フェーズ&quot;">​</a></h3><p>多数の物体間の潜在的な衝突を効率的に絞り込むための手法。</p><ul><li><strong>空間分割</strong>: グリッド、四分木、八分木</li><li><strong>スイープ&amp;プルーン</strong>: 軸に沿ったバウンディングボックスの投影</li><li><strong>境界ボリューム階層 (BVH)</strong>: 階層的な境界ボリューム</li></ul><h3 id="狭域フェーズ" tabindex="-1">狭域フェーズ <a class="header-anchor" href="#狭域フェーズ" aria-label="Permalink to &quot;狭域フェーズ&quot;">​</a></h3><p>実際の衝突を正確に検出するための手法。</p><ul><li><strong>球体同士</strong>: 中心間の距離と半径の比較</li><li><strong>AABB (軸並行境界ボックス)</strong>: 各軸に沿った重なりの確認</li><li><strong>OBB (有向境界ボックス)</strong>: 分離軸定理を使用</li><li><strong>凸多面体</strong>: GJKアルゴリズム</li><li><strong>凹形状</strong>: 凸分解または階層的アプローチ</li></ul><h2 id="衝突応答" tabindex="-1">衝突応答 <a class="header-anchor" href="#衝突応答" aria-label="Permalink to &quot;衝突応答&quot;">​</a></h2><p>衝突が検出された後の物体の動きを計算する処理。</p><ul><li><strong>反発係数</strong>: 衝突後のエネルギー損失を制御</li><li><strong>摩擦</strong>: 接触面に沿った動きの抵抗</li><li><strong>衝撃力</strong>: 衝突時に加えられる瞬間的な力</li><li><strong>連続衝突</strong>: 複数の物体が関与する複雑な衝突</li></ul><h2 id="制約ソルバー" tabindex="-1">制約ソルバー <a class="header-anchor" href="#制約ソルバー" aria-label="Permalink to &quot;制約ソルバー&quot;">​</a></h2><p>物体間の関係を維持するためのシステム。</p><ul><li><strong>距離制約</strong>: 2点間の距離を維持</li><li><strong>ヒンジ制約</strong>: 回転軸を定義</li><li><strong>スライダー制約</strong>: 直線上の動きを許可</li><li><strong>ラグドール</strong>: キャラクターの物理的な動きをシミュレート</li></ul><h2 id="特殊な物理効果" tabindex="-1">特殊な物理効果 <a class="header-anchor" href="#特殊な物理効果" aria-label="Permalink to &quot;特殊な物理効果&quot;">​</a></h2><ul><li><strong>布シミュレーション</strong>: 柔軟な材料の動きをモデル化</li><li><strong>流体力学</strong>: 液体と気体の動きをシミュレート</li><li><strong>破壊シミュレーション</strong>: オブジェクトの破壊と断片化</li><li><strong>ソフトボディ</strong>: 変形可能なオブジェクト</li></ul><h2 id="物理エンジンの最適化" tabindex="-1">物理エンジンの最適化 <a class="header-anchor" href="#物理エンジンの最適化" aria-label="Permalink to &quot;物理エンジンの最適化&quot;">​</a></h2><ul><li><strong>時間ステップ管理</strong>: 安定性とパフォーマンスのバランス</li><li><strong>スリープ状態</strong>: 静止オブジェクトの計算を省略</li><li><strong>近似計算</strong>: 精度とパフォーマンスのトレードオフ</li><li><strong>並列処理</strong>: マルチコアプロセッサの活用</li></ul><h2 id="一般的な物理エンジン" tabindex="-1">一般的な物理エンジン <a class="header-anchor" href="#一般的な物理エンジン" aria-label="Permalink to &quot;一般的な物理エンジン&quot;">​</a></h2><ul><li><strong>Box2D</strong>: 2D物理に特化した軽量エンジン</li><li><strong>Bullet Physics</strong>: オープンソースの3D物理エンジン</li><li><strong>PhysX</strong>: NVIDIAが開発するハードウェア加速対応エンジン</li><li><strong>Havok</strong>: 商用の高性能物理エンジン</li></ul><h2 id="参考資料" tabindex="-1">参考資料 <a class="header-anchor" href="#参考資料" aria-label="Permalink to &quot;参考資料&quot;">​</a></h2><ul><li>&quot;Game Physics Engine Development&quot; by Ian Millington</li><li>&quot;Real-Time Collision Detection&quot; by Christer Ericson</li><li>&quot;Physics for Game Developers&quot; by David M. Bourg</li></ul>',28)]))}const m=r(i,[["render",n]]);export{c as __pageData,m as default};
