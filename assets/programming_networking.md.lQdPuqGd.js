import{_ as a,c as i,o as n,ag as l}from"./chunks/framework.DlGnLQc4.js";const c=JSON.parse('{"title":"ネットワーク","description":"","frontmatter":{},"headers":[],"relativePath":"programming/networking.md","filePath":"programming/networking.md"}'),e={name:"programming/networking.md"};function p(t,s,h,r,k,d){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="ネットワーク" tabindex="-1">ネットワーク <a class="header-anchor" href="#ネットワーク" aria-label="Permalink to &quot;ネットワーク&quot;">​</a></h1><p>ゲームのネットワーキングは、複数のプレイヤーが同じゲーム世界で対話できるようにするための技術です。効果的なネットワークシステムは、遅延、パケットロス、帯域幅制限などの課題に対処しながら、一貫したゲーム体験を提供します。</p><h2 id="ネットワークアーキテクチャ" tabindex="-1">ネットワークアーキテクチャ <a class="header-anchor" href="#ネットワークアーキテクチャ" aria-label="Permalink to &quot;ネットワークアーキテクチャ&quot;">​</a></h2><h3 id="クライアント・サーバーモデル" tabindex="-1">クライアント・サーバーモデル <a class="header-anchor" href="#クライアント・サーバーモデル" aria-label="Permalink to &quot;クライアント・サーバーモデル&quot;">​</a></h3><p>中央サーバーがゲーム状態を管理し、クライアントと通信するモデル。</p><ul><li><strong>利点</strong>: 一貫性の高い状態管理、チート防止、新規参加の容易さ</li><li><strong>欠点</strong>: サーバーコスト、単一障害点、サーバー遅延</li></ul><h3 id="ピア・ツー・ピアモデル" tabindex="-1">ピア・ツー・ピアモデル <a class="header-anchor" href="#ピア・ツー・ピアモデル" aria-label="Permalink to &quot;ピア・ツー・ピアモデル&quot;">​</a></h3><p>各プレイヤーが直接他のプレイヤーと通信するモデル。</p><ul><li><strong>利点</strong>: 低遅延（理想的な条件下）、サーバーコスト不要</li><li><strong>欠点</strong>: 同期の複雑さ、チート防止の難しさ、NAT通過の問題</li></ul><h3 id="ハイブリッドモデル" tabindex="-1">ハイブリッドモデル <a class="header-anchor" href="#ハイブリッドモデル" aria-label="Permalink to &quot;ハイブリッドモデル&quot;">​</a></h3><p>クライアント・サーバーとピア・ツー・ピアの要素を組み合わせたモデル。</p><ul><li><strong>例</strong>: 権威サーバーと直接P2P通信の組み合わせ</li><li><strong>利点</strong>: 柔軟性、特定のゲームニーズへの適応性</li><li><strong>欠点</strong>: 実装の複雑さ</li></ul><h2 id="同期メカニズム" tabindex="-1">同期メカニズム <a class="header-anchor" href="#同期メカニズム" aria-label="Permalink to &quot;同期メカニズム&quot;">​</a></h2><h3 id="状態同期" tabindex="-1">状態同期 <a class="header-anchor" href="#状態同期" aria-label="Permalink to &quot;状態同期&quot;">​</a></h3><p>サーバーが定期的に完全または部分的なゲーム状態を送信する方法。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// サーバー側</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> broadcastGameState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gameState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    players: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPlayerStates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entities: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntityStates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timestamp: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  broadcastToAllClients</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gameState);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><strong>利点</strong>: 実装の単純さ、堅牢性</li><li><strong>欠点</strong>: 帯域幅使用量、更新頻度の制限</li></ul><h3 id="入力同期-ロックステップ" tabindex="-1">入力同期（ロックステップ） <a class="header-anchor" href="#入力同期-ロックステップ" aria-label="Permalink to &quot;入力同期（ロックステップ）&quot;">​</a></h3><p>各プレイヤーの入力のみを送信し、すべてのクライアントで同一のシミュレーションを実行する方法。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// クライアント側</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendPlayerInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    playerId: localPlayerId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actions: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timestamp: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sendToServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><strong>利点</strong>: 低帯域幅、高い応答性（理想的な条件下）</li><li><strong>欠点</strong>: 決定論的シミュレーションの必要性、遅延の影響を受けやすい</li></ul><h3 id="イベント同期" tabindex="-1">イベント同期 <a class="header-anchor" href="#イベント同期" aria-label="Permalink to &quot;イベント同期&quot;">​</a></h3><p>重要なイベントのみを送信する方法。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// サーバー側</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> broadcastEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: eventType,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: eventData,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timestamp: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  broadcastToAllClients</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><strong>利点</strong>: 非常に低い帯域幅、特定のゲームタイプに最適</li><li><strong>欠点</strong>: 複雑な状態管理、同期エラーの可能性</li></ul><h2 id="遅延対策技術" tabindex="-1">遅延対策技術 <a class="header-anchor" href="#遅延対策技術" aria-label="Permalink to &quot;遅延対策技術&quot;">​</a></h2><h3 id="クライアント側予測" tabindex="-1">クライアント側予測 <a class="header-anchor" href="#クライアント側予測" aria-label="Permalink to &quot;クライアント側予測&quot;">​</a></h3><p>クライアントが自身の入力の結果を即座に予測し、後でサーバーからの確認で修正する技術。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// クライアント側</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> applyLocalInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 予測を適用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  applyInputLocally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // サーバーに送信</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sendToServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 予測履歴に保存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  storePrediction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> receiveServerState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">serverState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // サーバー状態と予測の差異を調整</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  reconcileWithPredictions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serverState);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li><strong>利点</strong>: 応答性の向上、遅延の知覚的軽減</li><li><strong>欠点</strong>: 実装の複雑さ、予測エラー時の視覚的不整合</li></ul><h3 id="エンティティ補間" tabindex="-1">エンティティ補間 <a class="header-anchor" href="#エンティティ補間" aria-label="Permalink to &quot;エンティティ補間&quot;">​</a></h3><p>受信したスナップショット間を滑らかに補間する技術。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// クライアント側</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">renderTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 過去の2つの状態間を補間</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> prevState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getEntityStateBeforeTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entity.id, renderTime);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nextState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getEntityStateAfterTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entity.id, renderTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prevState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nextState) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateInterpolationFactor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prevState, nextState, renderTime);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> interpolatedState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interpolate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prevState, nextState, t);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    renderEntityAtState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entity, interpolatedState);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><strong>利点</strong>: 滑らかな視覚表現、ジッターの軽減</li><li><strong>欠点</strong>: 表示遅延の増加</li></ul><h3 id="ラグ補償" tabindex="-1">ラグ補償 <a class="header-anchor" href="#ラグ補償" aria-label="Permalink to &quot;ラグ補償&quot;">​</a></h3><p>サーバーがクライアントの遅延を考慮して過去の状態を再構築する技術。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// サーバー側</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processPlayerAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">playerId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">clientTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // プレイヤーの遅延を推定</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> latency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> estimatePlayerLatency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(playerId);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 過去の状態を再構築</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pastState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rewindGameState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> latency);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 過去の状態でアクションを処理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> executeActionInState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pastState, action);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 結果を現在の状態に適用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  applyActionResultToCurrentState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li><strong>利点</strong>: 高遅延環境での公平性向上</li><li><strong>欠点</strong>: サーバー負荷の増加、時間的不整合の可能性</li></ul><h2 id="セキュリティ考慮事項" tabindex="-1">セキュリティ考慮事項 <a class="header-anchor" href="#セキュリティ考慮事項" aria-label="Permalink to &quot;セキュリティ考慮事項&quot;">​</a></h2><ul><li><strong>権威サーバー</strong>: 重要なゲームロジックをサーバーで実行</li><li><strong>入力検証</strong>: クライアントからの入力の妥当性確認</li><li><strong>暗号化</strong>: 機密データの保護</li><li><strong>チート検出</strong>: 異常な動作やパターンの監視</li><li><strong>レート制限</strong>: サーバーリソースの保護</li></ul><h2 id="参考資料" tabindex="-1">参考資料 <a class="header-anchor" href="#参考資料" aria-label="Permalink to &quot;参考資料&quot;">​</a></h2><ul><li>&quot;Multiplayer Game Programming&quot; by Joshua Glazer and Sanjay Madhav</li><li>&quot;Networking for Game Programmers&quot; by Glenn Fiedler</li><li>&quot;Fast-Paced Multiplayer&quot; by Gabriel Gambetta</li></ul>`,42)]))}const g=a(e,[["render",p]]);export{c as __pageData,g as default};
