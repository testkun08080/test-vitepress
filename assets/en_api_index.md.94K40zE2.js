import{_ as a,c as t,o as n,ag as i}from"./chunks/framework.DlGnLQc4.js";const m=JSON.parse('{"title":"API Reference","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/index.md","filePath":"en/api/index.md"}'),s={name:"en/api/index.md"};function r(o,e,l,c,d,g){return n(),t("div",null,e[0]||(e[0]=[i('<h1 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h1><p>This API reference provides detailed documentation for the core classes and systems of our game engine. It serves as a comprehensive resource for developers working with the codebase, offering explanations of functionality, usage examples, and best practices.</p><h2 id="core-systems" tabindex="-1">Core Systems <a class="header-anchor" href="#core-systems" aria-label="Permalink to &quot;Core Systems&quot;">​</a></h2><p>Our game engine is built around several key systems that work together to create a complete game experience:</p><h3 id="game-management" tabindex="-1">Game Management <a class="header-anchor" href="#game-management" aria-label="Permalink to &quot;Game Management&quot;">​</a></h3><p>The central systems that control game flow, state, and core functionality:</p><ul><li><a href="/test-vitepress/en/api/game-manager.html"><strong>GameManager</strong></a>: Controls game state, scene transitions, and high-level game flow</li><li><strong>SceneManager</strong>: Handles loading, unloading, and transitions between game scenes</li><li><strong>TimeManager</strong>: Controls time-related functionality including time scale, pausing, and time measurement</li></ul><h3 id="entity-framework" tabindex="-1">Entity Framework <a class="header-anchor" href="#entity-framework" aria-label="Permalink to &quot;Entity Framework&quot;">​</a></h3><p>The foundation for all game objects and their behaviors:</p><ul><li><strong>Entity</strong>: Base class for all game objects</li><li><strong>Component</strong>: Modular behaviors that can be attached to entities</li><li><strong>Transform</strong>: Handles positioning, rotation, and scaling of entities</li><li><strong>EntityManager</strong>: Manages the lifecycle and organization of game entities</li></ul><h3 id="character-systems" tabindex="-1">Character Systems <a class="header-anchor" href="#character-systems" aria-label="Permalink to &quot;Character Systems&quot;">​</a></h3><p>Classes related to characters in the game:</p><ul><li><a href="/test-vitepress/en/api/player.html"><strong>Player</strong></a>: Manages the player character, including input handling and abilities</li><li><a href="/test-vitepress/en/api/enemy.html"><strong>Enemy</strong></a>: Base class for enemy characters with AI and behavior systems</li><li><strong>NPC</strong>: Non-player character implementation for interactive world characters</li><li><strong>Character</strong>: Base class with common functionality for all character types</li></ul><h3 id="input-and-controls" tabindex="-1">Input and Controls <a class="header-anchor" href="#input-and-controls" aria-label="Permalink to &quot;Input and Controls&quot;">​</a></h3><p>Systems for handling user input across different devices:</p><ul><li><a href="/test-vitepress/en/api/input-manager.html"><strong>InputManager</strong></a>: Processes and manages input from various devices</li><li><strong>InputMapping</strong>: Configurable input bindings and action mapping</li><li><strong>InputDevice</strong>: Abstract representation of input devices (keyboard, gamepad, etc.)</li><li><strong>TouchInput</strong>: Mobile-specific touch input handling</li></ul><h3 id="audio-systems" tabindex="-1">Audio Systems <a class="header-anchor" href="#audio-systems" aria-label="Permalink to &quot;Audio Systems&quot;">​</a></h3><p>Components for sound and music management:</p><ul><li><a href="/test-vitepress/en/api/audio-manager.html"><strong>AudioManager</strong></a>: Central system for playing and controlling all game audio</li><li><strong>SoundEffect</strong>: Individual sound effect implementation</li><li><strong>MusicTrack</strong>: Background music implementation with transitions</li><li><strong>AudioMixer</strong>: Controls audio mixing, volumes, and effects</li></ul><h3 id="physics-and-collision" tabindex="-1">Physics and Collision <a class="header-anchor" href="#physics-and-collision" aria-label="Permalink to &quot;Physics and Collision&quot;">​</a></h3><p>Systems for physical simulation and collision detection:</p><ul><li><strong>PhysicsSystem</strong>: Manages physical simulation in the game world</li><li><strong>Collider</strong>: Component for collision detection</li><li><strong>Rigidbody</strong>: Component for physics-based movement and interactions</li><li><strong>PhysicsMaterial</strong>: Defines physical properties of surfaces</li></ul><h3 id="rendering-and-graphics" tabindex="-1">Rendering and Graphics <a class="header-anchor" href="#rendering-and-graphics" aria-label="Permalink to &quot;Rendering and Graphics&quot;">​</a></h3><p>Components for visual presentation:</p><ul><li><strong>RenderManager</strong>: Controls the rendering pipeline and visual effects</li><li><strong>Camera</strong>: Manages the player&#39;s view into the game world</li><li><strong>Material</strong>: Defines surface appearance properties</li><li><strong>Shader</strong>: Specialized programs for visual effects and rendering</li></ul><h3 id="ui-systems" tabindex="-1">UI Systems <a class="header-anchor" href="#ui-systems" aria-label="Permalink to &quot;UI Systems&quot;">​</a></h3><p>User interface components and management:</p><ul><li><strong>UIManager</strong>: Controls UI elements, screens, and transitions</li><li><strong>UIElement</strong>: Base class for all UI components</li><li><strong>UIScreen</strong>: Full-screen UI layouts like menus and HUDs</li><li><strong>UIAnimation</strong>: Handles animations and transitions for UI elements</li></ul><h3 id="utility-systems" tabindex="-1">Utility Systems <a class="header-anchor" href="#utility-systems" aria-label="Permalink to &quot;Utility Systems&quot;">​</a></h3><p>Supporting functionality used throughout the engine:</p><ul><li><strong>SaveSystem</strong>: Handles saving and loading game data</li><li><strong>PoolManager</strong>: Object pooling for performance optimization</li><li><strong>EventSystem</strong>: Message passing and event handling</li><li><strong>DebugTools</strong>: Development and debugging utilities</li></ul><h2 id="using-the-api-reference" tabindex="-1">Using the API Reference <a class="header-anchor" href="#using-the-api-reference" aria-label="Permalink to &quot;Using the API Reference&quot;">​</a></h2><h3 id="code-examples" tabindex="-1">Code Examples <a class="header-anchor" href="#code-examples" aria-label="Permalink to &quot;Code Examples&quot;">​</a></h3><p>Each class documentation includes practical code examples showing common usage patterns. These examples demonstrate best practices and typical implementation scenarios.</p><h3 id="method-documentation" tabindex="-1">Method Documentation <a class="header-anchor" href="#method-documentation" aria-label="Permalink to &quot;Method Documentation&quot;">​</a></h3><p>Methods are documented with:</p><ul><li>Parameter descriptions</li><li>Return value explanations</li><li>Exceptions that might be thrown</li><li>Usage notes and cautions</li></ul><h3 id="property-documentation" tabindex="-1">Property Documentation <a class="header-anchor" href="#property-documentation" aria-label="Permalink to &quot;Property Documentation&quot;">​</a></h3><p>Properties include:</p><ul><li>Type information</li><li>Read/write access details</li><li>Default values</li><li>Usage context</li></ul><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><p>Event documentation covers:</p><ul><li>Event parameters</li><li>Typical use cases</li><li>Firing conditions</li><li>Example listeners</li></ul><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><p>When working with the API, consider these general guidelines:</p><ol><li><p><strong>Singleton Access</strong>: Access manager classes through their singleton instances (e.g., <code>GameManager.instance</code>)</p></li><li><p><strong>Component References</strong>: Cache component references during initialization rather than getting them repeatedly</p></li><li><p><strong>Event Handling</strong>: Subscribe to events during initialization and unsubscribe when no longer needed</p></li><li><p><strong>Error Handling</strong>: Check return values and handle potential null references</p></li><li><p><strong>Performance Considerations</strong>: Be mindful of performance-critical methods marked in the documentation</p></li></ol><h2 id="api-versioning" tabindex="-1">API Versioning <a class="header-anchor" href="#api-versioning" aria-label="Permalink to &quot;API Versioning&quot;">​</a></h2><p>The API follows semantic versioning (MAJOR.MINOR.PATCH):</p><ul><li><strong>MAJOR</strong>: Incompatible API changes</li><li><strong>MINOR</strong>: Functionality added in a backward-compatible manner</li><li><strong>PATCH</strong>: Backward-compatible bug fixes</li></ul><p>Current API Version: 1.0.0</p><h2 id="contributing-to-documentation" tabindex="-1">Contributing to Documentation <a class="header-anchor" href="#contributing-to-documentation" aria-label="Permalink to &quot;Contributing to Documentation&quot;">​</a></h2><p>If you find errors or want to improve the API documentation:</p><ol><li>Submit issues through our GitHub repository</li><li>Propose changes via pull requests</li><li>Follow the documentation style guide for consistency</li></ol><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><p>To begin exploring the API, we recommend starting with these core classes:</p><ul><li><a href="/test-vitepress/en/api/game-manager.html">GameManager</a>: Understand the overall game structure</li><li><a href="/test-vitepress/en/api/player.html">Player</a>: Learn about player character implementation</li><li><a href="/test-vitepress/en/api/input-manager.html">InputManager</a>: See how player input is handled</li><li><a href="/test-vitepress/en/api/audio-manager.html">AudioManager</a>: Explore the audio system</li></ul><p>These classes provide a foundation for understanding how the various systems interact within the game engine.</p>',57)]))}const u=a(s,[["render",r]]);export{m as __pageData,u as default};
